package it.polito.dp2.NFV.sol1;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import java.math.BigInteger;

import java.io.FileOutputStream;
import java.io.IOException;

import javax.xml.bind.JAXB;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import it.polito.dp2.NFV.*;           // import data creator library
import it.polito.dp2.NFV.sol1.jaxb.*; // import java content classes generated by binding compiler


public class NfvInfoSerializer {
	private NfvReader monitor     = null;
	private String outputXML      = null;
	private ObjectFactory of      = null;

	/**
	 * Default constructor
	 * @throws NfvReaderException
	 */
	public NfvInfoSerializer() throws NfvReaderException {
		NfvReaderFactory factory = NfvReaderFactory.newInstance();
		monitor                  = factory.newNfvReader();
		of                       = new ObjectFactory();
	}
	
	public NfvInfoSerializer(String oxml) throws NfvReaderException {
		NfvReaderFactory factory = NfvReaderFactory.newInstance();
		monitor                  = factory.newNfvReader();
		of                       = new ObjectFactory();
		outputXML                = new String(oxml);
	}


	public static void main(String[] args) {
		
		NfvInfoSerializer nis = null;
		
		// Check args
		if ( args.length == 0 ) {
			System.out.println("ERR: usage: java <program_name> <outputXML>");
			System.exit(0);
		}
		
		// Instantiate data generator
		try {
			nis = new NfvInfoSerializer();
		} catch (NfvReaderException e) {
			System.err.println("Could not instantiate data generator.");
			e.printStackTrace();
			System.exit(1);
		}
		
		// Start data retrieval and marshalling
		try {
			nis.do_marshal();			
		} catch(Exception e) {
			e.printStackTrace();
			System.exit(-1);
		}
		System.exit(0);
	}
	
	private void do_marshal() {
		
		try {
			
		// Create a JAXBContext
		JAXBContext jc = JAXBContext.newInstance( "it.polito.dp2.NFV.sol1.jaxb" );
		// Create a Marshaller
		Marshaller m = jc.createMarshaller();
		// set marshaller properties
		m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
		
		// retrieve data to marshal
		NFVSystemType nfvSystem = of.createNFVSystemType(); 
		
		retrieveIN(nfvSystem);            // Infrastructure Network
		retrieveCatalogue(nfvSystem);     // Catalogue
		retrieveDeployedNFFGs(nfvSystem); // deployed NFFGs
		
		// Create an element for marshalling
		JAXBElement<NFVSystemType> nfvRootElement = (new ObjectFactory()).createNFVSystem(nfvSystem);
		
		// Marshal to System.out for now
		JAXB.marshal(nfvRootElement, new FileOutputStream(outputXML) );
		
		} catch( JAXBException je ) {
            je.printStackTrace();
            System.exit(-1);
        } catch( IOException ioe ) {
            ioe.printStackTrace();
            System.exit(-1);
        }
		
	}
	
	
	protected void retrieveIN(NFVSystemType nfvs) {
		
		InfrastructureNetwork in = new InfrastructureNetwork();
		
		InfrastructureNetwork.Hosts hosts      = new InfrastructureNetwork.Hosts();
		List<Host>                  hosts_list = hosts.getHost(); // live list
		Host                        host       = null;
		
		InfrastructureNetwork.Connections connections      = new InfrastructureNetwork.Connections();
		List<Connection>                  connections_list = connections.getConnection(); // live list
		Connection                        connection       = null;
		
		
		ArrayList<HostReader>       allhosts  = new ArrayList<HostReader>();
		int i = 0; 
		int j = 0;
		
		
		// find hosts
		Set<HostReader> hosts_set = monitor.getHosts();
		
		for ( HostReader hr : hosts_set ) {
			host = buildHost( hr );
			hosts_list.add(host);
			allhosts.add(hr);
		}		
		
		// find connections between hosts
		for ( i=0; i < allhosts.size(); i++ )
			for ( j=i; j < allhosts.size(); j++ ) {
				connection = buildConnection( allhosts.get(i), allhosts.get(j) );
				connections_list.add( connection );
			}
		
		in.setHosts(hosts); // set hosts
		in.setConnections(connections); // set connections
		
		// add IN to NFVSystem
		nfvs.setIN(in);
	}
	
	private void retrieveCatalogue(NFVSystemType nfvs) {
		
		Catalogue catalogue = new Catalogue();
		
		List<VNF> vnfs = catalogue.getVnf(); // live list
		VNF       vnf  = null;
		
		Set<VNFTypeReader> vnfreads = monitor.getVNFCatalog();
		
		for ( VNFTypeReader vnftr : vnfreads ) {
			vnf = buildVNF( vnftr );
			vnfs.add(vnf);
		}
		
		nfvs.setCatalogue(catalogue);
		
	}
	
	
	private void retrieveDeployedNFFGs(NFVSystemType nfvs) {
		
		NFVSystemType.DeployedNFFGs deployedNFFGs = new NFVSystemType.DeployedNFFGs();
		List<NFFG>                  nffg_list     = deployedNFFGs.getNffg(); // live list
		NFFG                        nffg          = null;
		
		
		// find nffgs
		Set<NffgReader> nffgs_set = monitor.getNffgs(null);
		
		for ( NffgReader nr : nffgs_set ) {
			nffg = buildNFFG( nr );
			nffg_list.add(nffg);
		}
		
		nfvs.setDeployedNFFGs(deployedNFFGs);		
	}
	
	
	public Host buildHost( HostReader hr ) {
		Host     host = null;
		SizeInMB am   = null; // Available Memory
		SizeInMB as   = null; // Available Storage
		
		Host.AllocatedNodes allocatedNodes = null;
		List<NodeRef>       nodeRef_list   = null;
		NodeRef             noderef        = null; // Node "Reference"
		
		Set<NodeReader> nodes_set = null;
		
		// Set available memory
		am = buildSizeInMB( BigInteger.valueOf(hr.getAvailableMemory()) );
	
		// Set available storage
		as = buildSizeInMB( BigInteger.valueOf(hr.getAvailableStorage()) );

		// Prepare allocated nodes on host
		allocatedNodes = new Host.AllocatedNodes();
		nodeRef_list   = allocatedNodes.getNode(); // live list
		
		nodes_set = hr.getNodes();
		
		for ( NodeReader nr : nodes_set ) {
			noderef = new NodeRef();
			noderef.setName(nr.getName());
			noderef.setAssociatedNFFG(nr.getNffg().getName());
			
			nodeRef_list.add(noderef);
		}
		
		// Prepare host
		host = new Host();
		host.setName( hr.getName() );
		host.setMaxVNFs( hr.getMaxVNFs() );
		host.setInstalledMemory(am);
		host.setInstalledStorage(as);
		host.setAllocatedNodes(allocatedNodes);
		
		return host;
	}
	
	
	protected SizeInMB buildSizeInMB(BigInteger value) {
		SizeInMB sim = new SizeInMB();
		
		sim.setValue(value);
		sim.setUnit(sim.getUnit());
		
		return sim;
	}
	
	
	protected Connection buildConnection( HostReader sourceHost, 
			                              HostReader destHost    ) {
		
		Connection              connection = null;
		
		Connection.ConnectionID cID = null;
		Throughput              tp  = null;
		Latency                 lat = null;
		
		ConnectionPerformanceReader cpr = null;
		
		cpr = monitor.getConnectionPerformance( sourceHost, destHost );
		
		// Set connection ID (source and destination host name)
		cID = new Connection.ConnectionID();
		cID.setSourceHost(sourceHost.getName());
		cID.setDestionationHost(destHost.getName());
		
		// Set connection Throughput
		tp = new Throughput();
		tp.setValue(cpr.getThroughput());
		tp.setUnit(tp.getUnit());
		
		// Set connection Latency
		lat = new Latency();
		lat.setValue(cpr.getLatency());
		lat.setUnit(lat.getUnit());
		
		// Prepare connection
		connection = new Connection();
		connection.setAverageThroughput(tp);
		connection.setLatency(lat);
		connection.setConnectionID(cID);
		
		return connection;
	}
	
	protected VNF buildVNF( VNFTypeReader vnftr ) {
		VNF vnf = null;
		
		SizeInMB           rm  = null; // Required Memory
		SizeInMB           rs  = null; // Required Storages
		
		String ftstr = null;
		
		// Set required memory
		rm = buildSizeInMB( BigInteger.valueOf(vnftr.getRequiredMemory()) );
		// Set required storage
		rs = buildSizeInMB( BigInteger.valueOf(vnftr.getRequiredStorage()) );
		// Get functional type string
		ftstr = vnftr.getFunctionalType().value();
		
		// Prepare VNF
		vnf = new VNF();
		vnf.setName( vnftr.getName() );
		vnf.setRequiredMemory(rm);
		vnf.setRequiredStorage(rs);
		vnf.setFunctionalType( FunctionalTypeEnum.fromValue(ftstr) );
		
		return vnf;
	}
	
	
	
	protected NFFG buildNFFG( NffgReader nr ) {
		NFFG nffg = null;
		
		NFFG.Nodes nodes      = new NFFG.Nodes();
		List<Node> nodes_list = nodes.getNode(); // live list
		Node       node       = null;
		
		XMLGregorianCalendar time = null;
		GregorianCalendar    gc   = null;
		Calendar             c    = null;
		
		Set<NodeReader> nodes_set = nr.getNodes();
		
		for ( NodeReader ndr : nodes_set ) {
			node = buildNode ( ndr );
			nodes_list.add(node);
		}
		
		c = nr.getDeployTime();
		gc = new GregorianCalendar();
		gc.setTimeInMillis(c.getTimeInMillis());
		try {
			time = DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);
		} catch (DatatypeConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		nffg = new NFFG();
		nffg.setName( nr.getName() );
		nffg.setDeployTime( time );
		nffg.setNodes( nodes );
		
		return nffg;
	}
	
	protected Node buildNode ( NodeReader nr ) {
		Node node = null;
		
		Node.Links links      = new Node.Links();
		List<Link> links_list = links.getLink(); // live list
		Link       link       = null;
		
		Set<LinkReader> links_set = nr.getLinks();
		
		for ( LinkReader lr : links_set ) {
			link = buildLink( lr );
			links_list.add(link);
		}
		
		// Prepare node
		node = new Node();
		node.setName( nr.getName() );
		node.setFunctionalType( nr.getFuncType().getName() );
		node.setHostingHost( nr.getHost().getName() );
		node.setAssociatedNFFG( nr.getNffg().getName() ); 
		node.setLinks( links );		
		
		return node;
	}
	
	
	protected Link buildLink ( LinkReader lr ) {
		Link link = null;
		
		Throughput tp  = null;
		Latency    lat = null;
		
		// Set link minThroughput
		tp = new Throughput();
		tp.setValue( lr.getThroughput() );
		tp.setUnit(tp.getUnit());
		
		// Set link maxLatency
		lat = new Latency();
		lat.setValue( lr.getLatency() );
		lat.setUnit( lat.getUnit() );

        // Prepare Link		
		link = new Link();
		link.setName( lr.getName() );
		link.setSourceNode( lr.getSourceNode().getName() );
		link.setDestinationNode( lr.getDestinationNode().getName() );
		
		
		return link;
		
	}


}
